apply plugin: 'maven-publish'
apply plugin: 'signing'

/**
 * This plugin works by naming convention.
 *
 * It publishes by default java jar package and it also
 * expects publishArchives configuration and publishes whatever is inside it.
 */


// Container for generated POMs (by default added into archive configuration)
configurations {
    pom {
        transitive = false
    }
}

//
// Record all generated POM files for given publishing task
//
project.tasks.whenTaskAdded({ t ->
    // This is adhoc specific task for defined publication
    if (t.name.contains('generatePomFileForMavenAll')) {
        t.doLast({ tt ->
            artifacts {
                pom file(t.destination)
            }
        })
    }
})

publishing {
    publications {

        mavenAll(MavenPublication) {
            artifactId archivesBaseName
            // Publish all artifacts
            // NOTE: needs to be here to create a POM file with correct dependencies
            from components.java

            // Publish additional artifacts as documentation or source code
            configurations.publishArchives.allArtifacts.each { art ->
                logger.debug("Publishing artifact for: " + art)
                artifact art
            }


            pom {
                name = archivesBaseName
                description = "Pure Java implementation of XGBoost predictor for online prediction tasks"
                url = 'https://github.com/h2oai/xgboost-predictor'
                inceptionYear = '2018'

                organization {
                    name = 'H2O.ai'
                    url = 'http://h2o.ai/'
                }
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                scm {
                    url = 'https://github.com/h2oai/xgboost-predictor'
                    connection = 'scm:git:https://github.com/h2oai/xgboost-predictor.git'
                    developerConnection = 'scm:git:git@github.com:h2oai/xgboost-predictor.git'
                }
                issueManagement {
                    system 'GitHub issues'
                    url    'https://github.com/h2oai/h2o-3/issues'
                }
                developers {
                    developer {
                        id = 'support'
                        name = 'H2O.ai Support'
                        email = 'support@h2o.ai'
                    }
                }
            }
        }
    }

    repositories {
        // Release to local repo
        maven {
            name "BuildRepo"
            url "$rootDir/build/repo"
        }

        def targetNexus = project.findProperty('targetNexus')
        def targetPrivate = false
        def targetPublic = false
        switch(targetNexus) {
            case 'private':
                targetPrivate = true
                break
            case 'public':
                targetPublic = true
                break
        }

        // Release to private nexus
        if (targetPrivate) {
            maven {
                name "LocalNexusRepo"
                url "${localNexusLocation}/snapshots"

                credentials {
                    username project.findProperty("nexusUsername") ?: "<NA>"
                    password project.findProperty("nexusPassword") ?: "<NA>"
                }
            }
        }

        // Release to public nexus
        if (targetPublic) {
            maven {
                name 'Public Nexus'
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

                credentials {
                    username project.findProperty("nexusUsername") ?: "<NA>"
                    password project.findProperty("nexusPassword") ?: "<NA>"
                }
            }
        }
    }
}

signing {
    required {
        project.hasProperty("doSign")
    }
    sign publishing.publications
}
